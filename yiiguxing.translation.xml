<application>
  <component name="AppStorage">
    <histories>
      <item value="MESSAGE EXPIRED" />
      <item value="process Image Path" />
      <item value="&lt;b&gt;SetMinimumPollingInterval&lt;/b&gt; - this option is applicable only when the transport configured with this client is HTTP. This option specifies the interval in milliseconds between calls to the service checking for availability of new messages. The value is expected to be of type {@code long}." />
      <item value="&lt;b&gt;SetReceiveInterval&lt;/b&gt; - this option is applicable to all protocols in case of HTTPS protocol, this option acts the same as {@code SetMinimumPollingInterval} in case of MQTT and AMQP protocols, this option specifies the interval in millisecods between spawning a thread that dequeues a message from the SDK's queue of received messages." />
      <item value="&lt;b&gt;SetSendInterval&lt;/b&gt; - this option is applicable to all protocols. This value sets the period (in milliseconds) that this SDK spawns threads to send queued messages. Even if no message is queued, this thread will be spawned." />
      <item value="Set SAS Token Expiry Time" />
      <item value="@deprecated Use {@link #getFileUploadSasUri(FileUploadSasUriRequest)} to get the SAS URI, use the azure storage SDK to upload a file to that SAS URI, and then use {@link #completeFileUploadAsync(FileUploadCompletionNotification)} to notify Iot Hub that your file upload has completed, successfully or otherwise. This method does all three of these tasks for you, but has limited configuration options." />
      <item value="Interval" />
      <item value="shall" />
      <item value="The function shall set the device config's operation timeout" />
      <item value="&lt;b&gt;SetCertificatePath&lt;/b&gt; - this option is applicable only when the transport configured with this client is AMQP. This option specifies the path to the certificate used to verify peer. The value is expected to be of type {@code String}." />
      <item value="&lt;b&gt;SetHttpsReadTimeout&lt;/b&gt; - this option is applicable for HTTPS. This option specifies the read timeout in milliseconds per https request made by this client. By default, this value is 4 minutes. The value is expected to be of type {@code int}." />
      <item value="&lt;b&gt;SetHttpsConnectTimeout&lt;/b&gt; - this option is applicable for HTTPS. This option specifies the connect timeout in milliseconds per https request made by this client. By default, this value is 0 (no connect timeout). The value is expected to be of type {@code int}." />
      <item value="&lt;b&gt;SetHttpsConnectTimeout&lt;/b&gt; - this option is applicable for HTTPS. This option specifies the connect timeout in milliseconds per https reques made by this client. By default, this value is 0 (no connect timeout). The value is expected to be of type {@code int}." />
      <item value="reconnecting upon a connection drop and sending a message" />
      <item value="milliseconds" />
      <item value="if the provided timeout is 0 or negative" />
      <item value="the length in time, in milliseconds, until a given operation shall expire" />
      <item value="Set the length of time, in milliseconds, that any given operation will expire in. These operations include reconnecting upon a connection drop and sending a message." />
      <item value="Set the length of time, in milliseconds, that any given operation will expire in. These operations include reconnecting upon a connection drop and sending a message. @param timeout the length in time, in milliseconds, until a given operation shall expire @throws IllegalArgumentException if the provided timeout is 0 or negative" />
      <item value="// Codes_SRS_INTERNALCLIENT_34_070: [The function shall set the device config's operation timeout .]" />
      <item value="Setter for the expiryTime property. This setter uses relative time, not absolute time. @param timeOut The time out for the message, in milliseconds, from the current time." />
      <item value="Setter for the expiryTime property using absolute time @param absoluteTimeout The time out for the message, in milliseconds." />
      <item value="this option is applicable to all protocols * in case of HTTPS protocol" />
      <item value="in case of" />
      <item value="The options that can be set via this API are: - &lt;b&gt;SetMinimumPollingInterval&lt;/b&gt; - this option is applicable only when the transport configured with this client is HTTP. This option specifies the interval in milliseconds between calls to the service checking for availability of new messages. The value is expected to be of type {@code long}." />
      <item value="until a given operation shall expire" />
      <item value="in milliseconds" />
      <item value="timeout the length in time" />
      <item value="the length in time" />
      <item value="&lt;b&gt;SetSASTokenExpiryTime&lt;/b&gt; - this option is applicable for HTTP/ AMQP/MQTT. This option specifies the interval in seconds after which SASToken expires. If the transport is already open then setting this option will restart the transport with the updated expiry time, and will use that expiry time length for all subsequently generated sas tokens. The value is expected to be of type {@code long}." />
      <item value="Set Receive Interval" />
      <item value="Sets a runtime option identified by parameter {@code optionName} to {@code value}." />
      <item value="set Option Set SAS Token Expiry Time" />
      <item value="@param destinationBlobName is a string with the name of the file in the storage. @param inputStream is a InputStream with the stream to upload in the blob. @param streamLength is a long with the number of bytes in the stream to upload. @param callback the callback to be invoked when a file is uploaded. @param callbackContext a context to be passed to the callback. Can be {@code null}." />
      <item value="NOTE: IotHub does not currently support CA signed devices using file upload. Please use SAS based authentication or self signed certificates." />
      <item value="Asynchronously upload a stream to the IoT Hub." />
      <item value="Atomically sets to the given value and returns the previous value." />
      <item value="Unconditionally sets to the given value." />
      <item value="Atomically sets the value to the given updated value if the current value {@code ==} the expected value." />
      <item value="Peer" />
      <item value="insight" />
      <item value="send Iot Replace Info" />
      <item value="标志位" />
      <item value="brightness" />
      <item value="lightness" />
      <item value="reset logic when cam fail" />
      <item value="The specified block list is invalid. Please see the cause for further information." />
      <item value="转给ODM在后装上实现" />
      <item value="转给后装" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="349" />
        <entry key="ENGLISH" value="350" />
        <entry key="DUTCH" value="3" />
        <entry key="PORTUGUESE" value="3" />
        <entry key="JAPANESE" value="2" />
        <entry key="SLOVAK" value="3" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="primaryLanguage" value="CHINESE" />
      </google-translate>
    </option>
    <option name="ignoreRegExp" value="" />
  </component>
</application>