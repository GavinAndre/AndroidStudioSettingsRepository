<application>
  <component name="AppStorage">
    <histories>
      <item value="调用函数" />
      <item value="调用" />
      <item value="跳转" />
      <item value="字段" />
      <item value="监听" />
      <item value="恢复固件丢失的摄像头" />
      <item value="关门标志位增加延迟逻辑" />
      <item value="优化关门标志位的准确性" />
      <item value="firmware" />
      <item value="隐藏" />
      <item value="Inserts or updates a RealmObject. This is generally faster than {@link #copyOrUpdate(Realm, RealmModel, boolean, Map, Set)} since it doesn't return the inserted elements, and performs minimum allocations and checks. After being inserted any changes to the original object will not be persisted." />
      <item value="Inserts or updates an unmanaged RealmObject. This is generally faster than {@link #copyToRealmOrUpdate(RealmModel, ImportFlag...)} since it doesn't return the inserted elements, and performs minimum allocations and checks. After being inserted any changes to the original object will not be persisted. &lt;p&gt; Please note: &lt;ul&gt; &lt;li&gt; We don't check if the provided objects are already managed or not, so inserting a managed object might duplicate it. Duplication will only happen if the object doesn't have a primary key. Objects with primary keys will never get duplicated. &lt;/li&gt; &lt;li&gt;We don't create (nor return) a managed {@link RealmObject} for each element&lt;/li&gt; &lt;li&gt;Copying an object will copy all field values. Any unset field in the object and child objects will be set to their default value if not provided&lt;/li&gt; &lt;/ul&gt; &lt;p&gt; If you want the managed {@link RealmObject} returned, use {@link #copyToRealm(RealmModel, ImportFlag...)}, otherwise if you have a large number of object this method is generally faster. @param object RealmObjects to insert. @throws IllegalStateException if the corresponding Realm is closed, called from an incorrect thread or not in a transaction. @see #copyToRealmOrUpdate(RealmModel, ImportFlag...)" />
      <item value="* After being inserted any changes to the original object will not be persisted." />
      <item value="execute Transaction Sync" />
      <item value="Unconditionally" />
      <item value="MAX UPLOAD PARALLEL" />
      <item value="peer" />
      <item value="Sas URI response message had no payload" />
      <item value="payload" />
      <item value="&lt;b&gt;SetSASTokenExpiryTime&lt;/b&gt; - this option is applicable for HTTP/ AMQP/MQTT. This option specifies the interval in seconds after which SASToken expires. If the transport is already open then setting this option will restart the transport with the updated expiry time, and will use that expiry time length for all subsequently generated sas tokens. The value is expected to be of type {@code long}." />
      <item value="2400" />
      <item value="checking if another retry attempt should be made" />
      <item value="Completes all current outstanding requests and closes the IoT Hub client. Must be called to terminate the background thread that is sending data to IoT Hub. After {@code closeNow()} is called, the IoT Hub client is no longer usable. If the client is already closed, the function shall do nothing. @deprecated : As of release 1.1.25 this call is replaced by {@link #closeNow()}" />
      <item value="Must be called to terminate the background thread that is sending data to IoT Hub. After {@code closeNow()} is called, the IoT Hub client is no longer usable. If the client is already closed, the function shall do nothing." />
      <item value="Closes the IoT Hub client by releasing any resources held by client. When closeNow is called all the messages that were in transit or pending to be sent will be informed to the user in the callbacks and any existing connection to IotHub will be closed." />
      <item value="Set SAS Token Expiry Time" />
      <item value="@throws IllegalStateException if the client has not been opened yet or is already closed." />
      <item value="if the message provided is {@code null}." />
      <item value="* Asynchronously sends an event message to the IoT Hub." />
      <item value="context is the 3rd param of sendEventAsync()" />
      <item value="the previous value associated with {@code key}, or {@code null} if there was no mapping for {@code key}" />
      <item value="value to be associated with the specified key" />
      <item value="key with which the specified value is to be associated" />
      <item value="&lt;p&gt;The value can be retrieved by calling the {@code get} method with a key that is equal to the original key." />
      <item value="Maps the specified key to the specified value in this table. Neither the key nor the value can be null." />
      <item value="反序列化" />
      <item value="on site" />
      <item value="onsite" />
      <item value="一站式维修" />
      <item value="一站维修" />
      <item value="一键" />
      <item value="增加维修工单" />
      <item value="忽略一些重复注册的情况" />
      <item value="增加更改热点密码功能" />
      <item value="改进摄像头恢复逻辑" />
      <item value="加快拍照速度" />
      <item value="防止int越界" />
      <item value="冰箱温度兼容107和108版本" />
      <item value="兼容107和108版本的冰箱温度" />
      <item value="兼容" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="394" />
        <entry key="ENGLISH" value="395" />
        <entry key="DUTCH" value="3" />
        <entry key="PORTUGUESE" value="3" />
        <entry key="JAPANESE" value="2" />
        <entry key="SLOVAK" value="3" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="primaryLanguage" value="CHINESE" />
      </google-translate>
    </option>
    <option name="ignoreRegExp" value="" />
  </component>
</application>