<application>
  <component name="AppStorage">
    <histories>
      <item value="map" />
      <item value="heartbeat" />
      <item value="适配安卓10" />
      <item value="适配" />
      <item value="override fun success() {" />
      <item value="override fun failed(errorCode: ConnectionErrorCode) {" />
      <item value="epic" />
      <item value="Could not connect in the timeout window." />
      <item value="Authentication error occurred while trying to connect. * The password could be incorrect or the user could have a saved network configuration with a * different password!" />
      <item value="If the wifi network is not in range, the security type is unknown and WifiUtils doesn't support * connecting to the network." />
      <item value="* If the wifi network is not in range, the security type is unknown and WifiUtils doesn't support" />
      <item value="数字不能相同" />
      <item value="不能相同" />
      <item value="Applications are not allowed to disable networks created by other * applications." />
      <item value="Disable a configured network. The specified network will not be * a candidate for associating. This may result in the asynchronous * delivery of state change events." />
      <item value="This may result * in the asynchronous delivery of state change events." />
      <item value="请确保蜂窝网络可用" />
      <item value="Cellular" />
      <item value="transport" />
      <item value="Cellular transport" />
      <item value="请使用移动网络" />
      <item value="please" />
      <item value="数量" />
      <item value="扫码限制" />
      <item value="图标" />
      <item value="增大" />
      <item value="字段" />
      <item value="This {@link NetworkRequest} will live until released via * {@link #unregisterNetworkCallback(NetworkCallback)} or the calling application exits. A * version of the method which takes a timeout is * {@link #requestNetwork(NetworkRequest, NetworkCallback, int)}. * Status of the request can be followed by listening to the various * callbacks described in {@link NetworkCallback}. The {@link Network} * can be used to direct traffic to the network." />
      <item value="It is used to direct traffic to the given {@code Network}, either on a {@link Socket} basis * through a targeted {@link SocketFactory} or process-wide via * {@link ConnectivityManager#bindProcessToNetwork}." />
      <item value="This is supplied to applications via * {@link ConnectivityManager.NetworkCallback} in response to the active * {@link ConnectivityManager#requestNetwork} or passive * {@link ConnectivityManager#registerNetworkCallback} calls." />
      <item value="Returns a {@link SocketFactory} bound to this network. Any {@link Socket} created by * this factory will have its traffic sent over this {@code Network}. Note that if this * {@code Network} ever disconnects, this factory and any {@link Socket} it produced in the * past or future will cease to work." />
      <item value="Identifies a {@code Network}. This is supplied to applications via * {@link ConnectivityManager.NetworkCallback} in response to the active * {@link ConnectivityManager#requestNetwork} or passive * {@link ConnectivityManager#registerNetworkCallback} calls. * It is used to direct traffic to the given {@code Network}, either on a {@link Socket} basis * through a targeted {@link SocketFactory} or process-wide via * {@link ConnectivityManager#bindProcessToNetwork}." />
      <item value="Binds the current process to {@code network}. All Sockets created in the future * (and not explicitly bound via a bound SocketFactory from * {@link Network#getSocketFactory() Network.getSocketFactory()}) will be bound to * {@code network}. All host name resolutions will be limited to {@code network} as well. * Note that if {@code network} ever disconnects, all Sockets created in this way will cease to * work and all host name resolutions will fail. This is by design so an application doesn't * accidentally use Sockets it thinks are still bound to a particular {@link Network}. * To clear binding pass {@code null} for {@code network}. Using individually bound * Sockets created by Network.getSocketFactory().createSocket() and * performing network-specific host name resolutions via * {@link Network#getAllByName Network.getAllByName} is preferred to calling * {@code bindProcessToNetwork}." />
      <item value="@return a {@code URLConnection} to the resource referred to by this URL. * @throws MalformedURLException if the URL protocol is not HTTP or HTTPS. * @throws IOException if an error occurs while opening the connection. * @see java.net.URL#openConnection()" />
      <item value="Opens the specified {@link URL} on this {@code Network}, such that all traffic will be sent * on this Network. The URL protocol must be {@code HTTP} or {@code HTTPS}." />
      <item value="Binds the specified {@link Socket} to this {@code Network}. All data traffic on the socket * will be sent on this {@code Network}, irrespective of any process-wide network binding set by * {@link ConnectivityManager#bindProcessToNetwork}. The socket must not be connected. */" />
      <item value="&lt;b&gt;Note:&lt;/b&gt; Network communication may not use Wi-Fi even if Wi-Fi is connected; * traffic may instead be sent through another network, such as cellular data, * Bluetooth tethering, or Ethernet. For example, traffic will never use a * Wi-Fi network that does not provide Internet access (e.g. a wireless * printer), if another network that does offer Internet access (e.g. * cellular data) is available. Applications that need to ensure that their * network traffic uses Wi-Fi should use APIs such as * {@link Network#bindSocket(java.net.Socket)}, * {@link Network#openConnection(java.net.URL)}, or * {@link ConnectivityManager#bindProcessToNetwork} to do so." />
      <item value="Allow a previously configured network to be associated with. If * &lt;code&gt;attemptConnect&lt;/code&gt; is true, an attempt to connect to the selected * network is initiated. This may result in the asynchronous delivery * of state change events." />
      <item value="Reconnect to the currently active access point, even if we are already * connected. This may result in the asynchronous delivery of state * change events." />
      <item value="reassociate" />
      <item value="Applications are not allowed to enable networks created by other * applications." />
      <item value="Applications that need to ensure that their * network traffic uses Wi-Fi should use APIs such as * {@link Network#bindSocket(java.net.Socket)}, * {@link Network#openConnection(java.net.URL)}, or * {@link ConnectivityManager#bindProcessToNetwork} to do so." />
      <item value="* User has to manually do this." />
      <item value="* Starting Android 10, apps are no longer allowed to enable wifi." />
      <item value="EPIC" />
      <item value="支持丢固件的摄像头升级固件" />
      <item value="损失固件" />
      <item value="掉固件" />
      <item value="支持掉固件的摄像头升级固件" />
      <item value="支持升级固件" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="149" />
        <entry key="ENGLISH" value="150" />
        <entry key="DUTCH" value="2" />
        <entry key="PORTUGUESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="primaryLanguage" value="CHINESE" />
      </google-translate>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="showStatusIcon" value="false" />
  </component>
</application>