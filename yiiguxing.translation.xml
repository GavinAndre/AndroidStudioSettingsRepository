<application>
  <component name="AppStorage">
    <option name="newTranslationDialogCollapseDictViewer" value="false" />
    <option name="newTranslationDialogWidth" value="574" />
    <option name="newTranslationDialogX" value="796" />
    <option name="newTranslationDialogY" value="232" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="nvl" />
      <item value="Mirage" />
      <item value="&lt;p class=&quot;note&quot;&gt;For security reasons, the {@link android.content.Intent} you supply here should almost always be an &lt;em&gt;explicit intent&lt;em&gt;, that is specify an explicit component to be delivered to through {@link IntentsetClass(android.content.Context, Class) Intent.setClass}&lt;p&gt;" />
      <item value="Retrieve a PendingIntent that will start a new activity, like calling {@link ContextstartActivity(Intent) Context.startActivity(Intent)}. Note that the activity will be started outside of the context of an existing activity, so you must use the {@link IntentFLAG_ACTIVITY_NEW_TASK Intent.FLAG_ACTIVITY_NEW_TASK} launch flag in the Intent." />
      <item value="Flag indicating that this PendingIntent can be used only once. For use with {@link getActivity}, {@link getBroadcast}, and {@link getService}. &lt;p&gt;If set, after {@link send()} is called on it, it will be automatically canceled for you and any future attempt to send through it will fail." />
      <item value="Pending" />
      <item value="Pending Intent" />
      <item value="Intent" />
      <item value="Flag indicating that if the described PendingIntent already exists, then keep it but replace its extra data with what is in this new Intent. For use with {@link getActivity}, {@link getBroadcast}, and {@link getService}. &lt;p&gt;This can be used if you are creating intents where only the extras change, and don't care that any entities that received your previous PendingIntent will be able to launch it with your new extras even if they are not explicitly given to it." />
      <item value="Flag indicating that if the described PendingIntent already exists, the current one should be canceled before generating a new one. For use with {@link getActivity}, {@link getBroadcast}, and {@link getService}. &lt;p&gt;You can use this to retrieve a new PendingIntent when you are only changing the extra data in the Intent; by canceling the previous pending intent, this ensures that only entities given the new data will be able to launch it. If this assurance is not an issue, consider {@link FLAG_UPDATE_CURRENT}." />
      <item value="Flag indicating that if the described PendingIntent does not already exist, then simply return null instead of creating it. For use with {@link getActivity}, {@link getBroadcast}, and {@link getService}." />
      <item value="FLAG ONE SHOT" />
      <item value="Return whether this activity is the root of a task. The root is the first activity in a task." />
      <item value="Started from a Notification and the app is not running, restart the app with back stack Here create a launch Intent which includes the back stack" />
      <item value="Now launch this activity again and immediately return" />
      <item value="Back Stack" />
      <item value="不在通知中不要为通知设置Back Stack" />
      <item value="This flag will be ignored if {@link FLAG_ACTIVITY_CLEAR_TOP} is also specified." />
      <item value="&lt;p&gt;For example, consider a task consisting of four activities: A, B, C, D. If D calls startActivity() with an Intent that resolves to the component of activity B, then B will be brought to the front of the history stack, with this resulting order: A, C, D, B." />
      <item value="If set in an Intent passed to {@link ContextstartActivity Context.startActivity()}, this flag will cause the launched activity to be brought to the front of its task's history stack if it is already running." />
      <item value="Adds the Intent to the top of the stack" />
      <item value="Adds the back stack" />
      <item value="must not be 0" />
      <item value="Orio" />
      <item value="muluggage PDA message service" />
      <item value="muluggage PDA message foreground service" />
      <item value="The user visible name of the channel. You can rename this channel when the system locale changes by listening for the {@link IntentACTION_LOCALE_CHANGED} broadcast. The recommended maximum length is 40 characters; the value may be truncated if it is too long." />
      <item value="The id of the channel. Must be unique per package. The value may be truncated if it is too long." />
      <item value="ButterKnife use in library module" />
      <item value="Appends the given {@link ResourceDecoder} onto the list of available {@link ResourceDecoder}s in this bucket, allowing it to be used if all earlier and default {@link ResourceDecoder}s for the given types in this bucket fail (or there are none)." />
      <item value="prepend" />
      <item value="teardown" />
      <item value="with Cross Fade" />
      <item value="Sign File Model" />
      <item value="artifacts" />
      <item value="determine" />
      <item value="Could not determine artifacts for" />
      <item value="Skipped due to earlier error" />
      <item value="MU Baggage Goup" />
      <item value="Goup" />
      <item value="abnor" />
      <item value="abnorm" />
      <item value="abnormal" />
      <item value="gray" />
      <item value="grey" />
      <item value="round" />
      <item value="round&#10;" />
      <item value="desugar" />
      <item value="Specifies a sorted list of flavors that the plugin should try to use from a given dimension. The following tells the plugin that, when encountering a dependency that includes a &quot;minApi&quot; dimension, it should select the &quot;minApi18&quot; flavor. You can include additional flavor names to provide a sorted list of fallbacks for the dimension." />
      <item value="Specifies a sorted list of flavors that the plugin should try to use from&#10;    // a given dimension. The following tells the plugin that, when encountering a dependency that includes a &quot;minApi&quot; dimension, it should select the &quot;minApi18&quot; flavor. You can include additional flavor names to provide a sorted list of fallbacks for the dimension." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="196" />
        <entry key="ENGLISH" value="196" />
        <entry key="BASQUE" value="1" />
        <entry key="FILIPINO" value="1" />
        <entry key="KOREAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="PORTUGUESE" value="2" />
        <entry key="JAPANESE" value="4" />
        <entry key="GREEK" value="1" />
        <entry key="INDONESIAN" value="2" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1617676895123" />
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="primaryLanguage" value="CHINESE" />
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
  </component>
</application>